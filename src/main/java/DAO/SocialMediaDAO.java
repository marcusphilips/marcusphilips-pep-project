package DAO;

import static org.mockito.Mockito.lenient;

import java.sql.*;
import java.util.*;

import Model.Account;
import Model.Message;
import Util.ConnectionUtil;

// ### Account
//
// account_id integer primary key auto_increment,
// username varchar(255) unique,
// password varchar(255)
// 

public class SocialMediaDAO {

    /**
     * Creates an account in the `account` database given an Account object where the `account_ID` is generated by the 
     * datatable. Returns a new Account object with the same parameters except with the table's `account_ID` unless it failed
     * where it will return null.
     * @param account
     * @return account or null
     */
    public Account createAccount(Account account){
        Connection connection = ConnectionUtil.getConnection();
        try{
            String sql = "INSERT INTO account (username, password) VALUES (?, ?);";
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            ps.setString(1, account.getUsername());
            ps.setString(2, account.getPassword());

            ps.executeUpdate();

            ResultSet rs = ps.getGeneratedKeys();
            if (rs.next()){
                return new Account((int) rs.getInt(1), account.getUsername(), account.getPassword());
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Logs in. Returns account type with its primary key `account_id` if successful otherwise returns null.
     * @param account just username and password
     * @return account or null
     */
    public Account login(Account account){
        Connection connection = ConnectionUtil.getConnection();
        try{
            String sql = "SELECT * FROM account WHERE username = ? AND password = ?;";
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            ps.setString(1, account.getUsername());
            ps.setString(2, account.getPassword());

            ps.executeUpdate();

            ResultSet rs = ps.getGeneratedKeys();
            if (rs.next()){
                return new Account((int) rs.getInt(1), account.getUsername(), account.getPassword());
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    // ### Message
    //
    // message_id integer primary key auto_increment,
    // posted_by integer,
    // message_text varchar(255),
    // time_posted_epoch long,
    // foreign key (posted_by) references Account(account_id)
    /**
     * Adds message. Generates new primary key for `message id`
     * @param message
     * @return
     */
    public Message post(Message message){
        Connection connection = ConnectionUtil.getConnection();
        try{
            String sql = "INSERT INTO message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?);";
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            ps.setInt(1, message.getPosted_by());
            ps.setString(2, message.getMessage_text());
            ps.setLong(3, message.getTime_posted_epoch());

            ps.executeUpdate();

            ResultSet rs = ps.getGeneratedKeys();
            if (rs.next()){
                return new Message(
                    rs.getInt(1), 
                    message.getPosted_by(), 
                    message.getMessage_text(), 
                    message.getTime_posted_epoch()
                );
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    public ArrayList<Message> getAllMessages(){
        Connection connection = ConnectionUtil.getConnection();
        ArrayList<Message> messages = new ArrayList<Message> ();
        try{
            String sql = "SELECT * from message;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                new Message(
                    rs.getInt(1), 
                    rs.getInt(2), 
                    rs.getString(3), 
                    rs.getLong(4)
                );
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());

        }
        return messages;
    }
}
